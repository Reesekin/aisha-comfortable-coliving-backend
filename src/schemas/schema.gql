# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  accountID: Int!
  accountType: AccountType!
  ageRange: String!
  birthDate: String!
  description: String!
  email: String!
  firstName: String!
  lastName: String!
  location: String!
}

"""The three account types the user can create."""
enum AccountType {
  HOMEOWNER
  PROPERTYOWNER
  TENANT
}

input CreateAccountInput {
  accountID: Int!
  accountType: AccountType!
  ageRange: String!
  birthDate: String!
  description: String!
  email: String!
  firstName: String!
  lastName: String!
  location: String!
}

input CreateEventInput {
  eventDate: String!
  eventDescription: String!
  eventID: Int!
  eventLocation: String!
  eventName: String!
  eventTime: String!
}

input CreateListingInput {
  airConditioning: DecisionType!
  bedrooms: Int!
  dateAvailable: String!
  furnished: DecisionType!
  homeownerLivingIn: DecisionType!
  listingDescription: String!
  listingID: Int!
  listingLocation: String!
  listingSqFootage: String!
  listingTitle: String!
  monthlyCost: Int!
  numOfHousemates: Int!
  parkingSlots: Int!
  pets: DecisionType!
  smoking: DecisionType!
  wifi: DecisionType!
}

input CreatePropertyInput {
  availability: String!
  price: String!
  propertyID: Int!
  propertyLocation: String!
  propertyName: String!
}

"""For the Yes or No questions"""
enum DecisionType {
  NO
  YES
}

type Event {
  eventDate: String!
  eventDescription: String!
  eventID: Int!
  eventLocation: String!
  eventName: String!
  eventTime: String!
}

type ListingDetails {
  airConditioning: DecisionType!
  bedrooms: Int!
  dateAvailable: String!
  furnished: DecisionType!
  homeownerLivingIn: DecisionType!
  listingDescription: String!
  listingID: Int!
  listingLocation: String!
  listingSqFootage: String!
  listingTitle: String!
  monthlyCost: Int!
  numOfHousemates: Int!
  parkingSlots: Int!
  pets: DecisionType!
  smoking: DecisionType!
  wifi: DecisionType!
}

type Login {
  email: String!
  id: Int!
  password: String
  role: Int
  username: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResp {
  bearer_token: String!
  user: Login!
}

type MeetingInfo {
  UserJoinMeeting: String!
  UserMadeMeeting: String!
  day: Int!
  hour: Int!
  id: Int!
  minutes: Int!
  month: Int!
  year: Int!
}

input MeetingInput {
  UserJoinMeeting: String!
  UserMadeMeeting: String!
  day: Int!
  hour: Int!
  id: Int!
  minutes: Int!
  month: Int!
  year: Int!
}

type Mutation {
  compare(loginInput: LoginInput!): Login
  createAccount(createAccountInput: CreateAccountInput!): Account!
  createEvent(createEventInput: CreateEventInput!): Event!
  createListing(createListingInput: CreateListingInput!): ListingDetails!
  createLogin(registerInput: RegisterInput!): Login!
  createMeeting(meetingInput: MeetingInput!): MeetingInfo!
  createProperty(createPropertyInput: CreatePropertyInput!): Properties!
  createSideMenu(SideMenuInput: SideMenuInput!): SideMenu!
  login(loginInput: LoginInput!): LoginResp
  setRole(roleInput: RoleInput!): Login
  updateEvent(updateEvent: CreateEventInput!): Event!
  updateListing(updateListing: CreateListingInput!): ListingDetails!
  updateProperty(updateProperty: CreatePropertyInput!): Properties!
  updateSideMenu(UpdateSideMenuInput: UpdateSideMenuInput!): SideMenu!
}

type Properties {
  availability: String!
  price: String!
  propertyID: Int!
  propertyLocation: String!
  propertyName: String!
}

type Query {
  events: [Event!]!
  findEmail(email: String!): Login
  findMonth(month: Float!): MeetingInfo!
  getAccountByEmail(email: String!): Account!
  getAccountByFirstName(firstName: String!): Account!
  getAccountByLastName(lastName: String!): Account!
  getEvent(eventName: String!): Event!
  getListing(listingName: String!): ListingDetails!
  getProperty(propertiesName: String!): Properties!
  listings: [ListingDetails!]!
  properties: [Properties!]!
  viewLogins: [Login!]
}

input RegisterInput {
  email: String!
  password: String!
  role: Int = 1
  username: String!
}

input RoleInput {
  email: String!
  role: Int!
}

type SideMenu {
  firstName: String!
  profilePhoto: String!
  userId: Int!
}

input SideMenuInput {
  firstName: String!
  profilePhoto: String!
  userId: Float!
}

input UpdateSideMenuInput {
  profilePhoto: String!
  userId: Float!
}